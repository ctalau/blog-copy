<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="resolving_refs_refactoring">
    <title>Resolving DITA Cross-References in Refactoring Operations</title>
    <prolog>
        <author>Chris Papademetrious</author>
        <critdates>
            <created date="2023-07-28"/>
        </critdates>
    </prolog>
    <body>
        <p>We needed a way to resolve DITA <codeph>&lt;xref></codeph> and <codeph>&lt;link></codeph>
            elements to their target element in a refactoring operation. We also needed to determine
            whether the link was a local or peer-map reference. Fortunately, Oxygen v25.1 provided
            us with the solution!</p>
        <section id="section_kmq_l2m_gyb">
            <title>The Missing Piece - Resolving a @keyref</title>
            <p>For <codeph>&lt;xref></codeph> and <codeph>&lt;link></codeph> elements, we use a mix
                of <xmlatt>href</xmlatt> and <xmlatt>keyref</xmlatt> references in our content. In
                XSLT refactoring operations, we could resolve <xmlatt>href</xmlatt> references to
                the target file (and optionally, an element in that file) by using the XPath
                    <codeph>document()</codeph> function. However, we had no way of resolving
                    <xmlatt>keyref</xmlatt> references because a refactoring operation only
                processes the current file (it doesn't consider Oxygen's map context or the keys
                defined within it). In addition, writing such a resolver in XSLT that properly
                considers keyscopes would be enormously difficult.</p>
        </section>
        <p>In the Oxygen v25.1 release, <xref
                href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/dita/extensions/DITAXSLTExtensionFunctionUtil.html"
                format="html" scope="external">new API functions</xref> were introduced to provide
            information about <xmlatt>keyref</xmlatt> references:</p>
        <ul id="ul_k2r_ydm_gyb">
            <li>
                <p>The <codeph>getKeyRefInfo()</codeph> function returns information about a
                    reference's type (local, peer, unresolved, and so on).</p>
            </li>
            <li>
                <p>The <codeph>getKeyRefAbsoluteReference()</codeph> function resolves a
                        <xmlatt>keyref</xmlatt> to its equivalent <xmlatt>href</xmlatt> reference
                    URL.</p>
            </li>
        </ul>
        <note id="note_j2y_khm_gyb">
            <p>There were subsequent improvements to the API functions in Oxygen v25.1 build
                2023070306, so you should use that release or later for best results.</p>
        </note>
        <p>Thanks to this new API, we could use a simple <xmlatt>href</xmlatt> resolver written in
            XSLT for <xmlatt>keyref</xmlatt> references too!</p>
        <section id="section_wkw_skm_gyb">
            <title>Resolving Cross-References in Refactoring Operations</title>
            <p>The attached test case provides the following XSLT file that you can include in your
                own refactoring operations:</p>
            <p><filepath>frameworks/dita/refactoring/util-get-referenced-element.xsl</filepath></p>
            <p>This file defines a <codeph>mode="get-referenced-element"</codeph> template that,
                when applied to <i>any</i> element with an <xmlatt>href</xmlatt> or
                    <xmlatt>keyref</xmlatt> attribute, returns the referenced element. If the
                reference cannot be resolved, the template returns an empty sequence.</p>
            <p>The template works as follows:</p>
            <ol id="ul_m1k_2mm_gyb">
                <li>
                    <p>References with <codeph><xmlatt>scope</xmlatt>="external"</codeph> always
                        return an empty sequence.</p>
                </li>
                <li>
                    <p>References with <xmlatt>format</xmlatt> set to a value other than
                            <codeph>"dita"</codeph> always return an empty sequence.</p>
                </li>
                <li>
                    <p>If the reference has a <xmlatt>keyref</xmlatt>, it is converted to an
                            <xmlatt>href</xmlatt> value using
                            <codeph>getKeyRefAbsoluteReference()</codeph>.</p>
                </li>
                <li>
                    <p>The <xmlatt>href</xmlatt> value is parsed into its components as follows:</p>
                    <p><codeph>[<varname>file</varname>]#<varname>topic_id</varname>[/<varname>element_id</varname>]</codeph></p>
                </li>
                <li>
                    <p>The target document is obtained as follows:</p>
                    <ul id="ul_msn_34m_gyb">
                        <li>
                            <p>If no <varname>file</varname> is specified, the in-memory document
                                that contains the cross-reference element is used.</p>
                        </li>
                        <li>
                            <p>If a <varname>file</varname> is specified and that file contains the
                                cross-reference element, the in-memory document that contains the
                                cross-reference element is used.</p>
                        </li>
                        <li>
                            <p>Otherwise, the specified file document is loaded from disk using the
                                XPath <codeph>document()</codeph> function.</p>
                        </li>
                    </ul>
                    <p>This heuristic approach ensures that in multiple-pass refactoring operations,
                        the in-memory version of the content is preferred over the on-disk
                        version.</p>
                </li>
                <li>
                    <p>The topic that matches the <varname>topic_id</varname> value is obtained from
                        the target document.</p>
                </li>
                <li>
                    <p>If an <varname>element_id</varname> is specified, the element in the topic
                        that matches the <varname>element_id</varname> value is obtained.</p>
                    <p>Because non-topic <xmlatt>id</xmlatt> values do not need to be unique, the
                        code ensures that no subtopics within the matching topic are searched to
                        avoid incorrect matches.</p>
                </li>
            </ol>
            <p>To view the XSLT stylesheet without downloading the archive, click on the following
                link:</p>
            <p><xref href="resolving_refs_refactoring/util-get-referenced-element.xsl" format="xsl"
                    >util-get-referenced-element.xsl</xref></p>
            <p>There are comments in the code to explain how it works.</p>
            <p>The <xmlatt>keyref</xmlatt> API functions require that a map context be active in
                Oxygen. If no context is available (for example, no map is open in the
                    <uicontrol>DITA Maps Manager</uicontrol>), there will be no key information
                available to resolve the reference.</p>
        </section>
        <section id="section_klm_crm_gyb">
            <title>Example Test Case</title>
            <p>The following Oxygen project provides examples of how cross-reference resolutions can
                be used in refactoring operations and Schematron checks:</p>
            <p><xref href="resolving_refs_refactoring/resolving_refs_refactoring.zip" format="zip"
                    >resolving_refs_refactoring.zip</xref></p>
            <p>Specifically, it provides the following:</p>
            <ul id="ul_jym_grm_gyb">
                <li>
                    <p>An "Update Cross References" refactoring operation is provided that:</p>
                    <ul id="ul_dgs_mrm_gyb">
                        <li>
                            <p>Sets (or updates) the <xmlatt>type</xmlatt> attribute for
                                    <xmlelement>xref</xmlelement> and <xmlelement>link</xmlelement>
                                elements.</p>
                            <image href="resolving_refs_refactoring/refactoring_setting_type_attributes.png" placement="break"
                                id="image_kc3_nnn_gyb"/>
                        </li>
                        <li>
                            <p>Populates the target text for <xmlelement>xref</xmlelement> and
                                    <xmlelement>link</xmlelement> elements that reference topics in
                                peer maps (i.e. cross-book links).</p>
                            <image href="resolving_refs_refactoring/refactoring_target_text.png" placement="break"
                                id="image_q3x_spn_gyb"/>
                        </li>
                    </ul>
                </li>
                <li>
                    <p>Schematron checks are provided that:</p>
                    <ul id="ul_x5h_bsm_gyb">
                        <li>
                            <p>Warn about <xmlelement>xref</xmlelement> and
                                    <xmlelement>link</xmlelement> elements that reference topics in
                                peer maps (i.e. cross-book links) but do not contain any target
                                text.</p>
                            <image href="resolving_refs_refactoring/schematron_warn_missing_target_text.png" placement="break"
                                id="image_yhp_nmn_gyb"/>
                            <p>This check also offers a "quick fix" that populates the target text
                                for you.</p>
                        </li>
                        <li>
                            <p>Show the value of the <codeph>getKeyRefInfo()</codeph> and
                                    <codeph>getKeyRefAbsoluteReference()</codeph> API calls for any
                                element with a <xmlatt>keyref</xmlatt> attribute.</p>
                            <image href="resolving_refs_refactoring/showing_API_values.png" placement="break"
                                id="image_xrk_vln_gyb"/>
                            <p>These informational checks are commented out by default. You can
                                uncomment them in the following file:</p>
                            <p><filepath>frameworks/dita/sch/checks.sch</filepath></p>
                        </li>
                    </ul>
                </li>
            </ul>
            <p>When target text is added to a peer map (cross-book) reference, an
                    <xmlelement>?oxy-peertext?</xmlelement> processing instruction is added to
                indicate that the text was updated automatically. If you remove this processing
                instruction and customize the target text, your customized text will not be
                disturbed by future automatic updates.</p>
        </section>
    </body>
</topic>
