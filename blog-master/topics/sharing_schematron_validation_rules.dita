<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="sharing_schematron_validation_rules">
    <title>Sharing Schematron Validation Rules</title>
    <prolog>
        <author>Radu Coravu</author>
    </prolog>
    <body>
        <p>Custom <b>Schematron</b> rules are a great way to ensure consistency for the edited XML
      structure, especially when there is a large team working on the same set of documents. You can
      use <b>Schematron</b> for numerous use cases. For example, to make sure that certain elements
      are not used at all, to impose restrictions on the amount of text for an element, or to impose
      restrictions on certain elements based on various attribute values or text content set in
      other elements. Furthermore, you can define quick fixes for each <b>Schematron</b> rule to
      give the technical writer proposed solutions for the reported problem. In a previous blog
      post, I described how we use <b>Schematron</b> rules for our <b>Oxygen User's Manual</b> to
      impose restrictions when editing DITA content: <xref
          href="SchematronBCs.dita"/>.</p>
        <p>Once you define the <b>Schematron</b> rules, they can be shared with the other members of
            your team via a document type <b>framework configuration</b>: <xref
                href="oxygenFrameworks.dita"/>.</p>
        <p>In this post, I'm going to provide some precise steps to share a set of <b>Schematron</b>
      rules with a <b>DITA</b> framework extension.</p>
        <p>Instead of making changes directly to the <b>DITA</b> framework configuration folder
      (located in <b>OXYGEN_INSTALL_DIR\frameworks\dita</b>) and distributing it, you can choose to
      extend the <b>DITA</b> framework and distribute the extension. This way, you will benefit from
      new functionality added to the base framework in newer versions of <b>Oxygen</b> and you can
      still use your customizations.</p>
        <p> The following steps describe how you can extend a <b>DITA</b> framework that contains an
      additional Schematron rules file:</p>
        <ol id="ol_d23_5x1_wy">
            <li>Create a folder structure (for example, <b>custom_frameworks/dita-extension</b>)
        somewhere on your local disk, in a place where you have full write access. </li>
            <li>In that new folder structure, create another folder
          (<b>custom_frameworks/dita-extension/rules</b>) that will contain all of your custom
        Schematron files.</li>
            <li>Create a new <b>ISO Schematron</b> file (for example, <b>additionalRules.sch</b>)
                that contains the additional rules you want to impose. For example, the following
                Schematron rule reports an error if the <b>@scale</b> attribute is used on an
                image:<codeblock outputclass="language-xml">&lt;schema xmlns="http://purl.oclc.org/dsdl/schematron" queryBinding="xslt2"
    xmlns:sqf="http://www.schematron-quickfix.com/validator/process">
    &lt;pattern>
        &lt;rule context="*[contains(@class, ' topic/image ')]">
            &lt;assert test="not(@scale)">
                Dynamically scaled images are not properly displayed, you
                should scale the image with an image tool and keep it within
                the recommended width and height limits.
            &lt;/assert>
        &lt;/rule>
    &lt;/pattern>
&lt;/schema></codeblock></li>
            <li>In the <i>Document Type Association / Locations</i> preferences page, add the path
                to your <b>custom_frameworks</b> folder in the <b>Additional frameworks
                    directories</b> list. Click <b>OK</b> or <b>Apply</b> in the <b>Preferences</b>
                dialog to save your changes.</li>
            <li>In the <i>Document Type Association</i> preferences page, select the <b>DITA</b>
        document type configuration and use the <b>Extend</b> button to create an extension for
        it.</li>
            <li>Give the extension a custom name (for example, <b>DITA - Custom</b>), then change
        its <b>Storage</b> option to <b>External</b>, and then save it to a path such as:
          <b>path/to/.../custom_frameworks/dita-extension/dita-extension.framework</b>.</li>
            <li>Make whatever changes you desire to the extension, go to the <b>Validation</b> tab,
        edit the default <b>DITA</b> validation scenario, and add an extra validation stage to it (a
        stage that uses your custom <b>Schematron</b> schema). More details about validation
        scenarios can be found here: <xref
          href="https://www.oxygenxml.com/doc/ug-editor/topics/dg-validation-scenarios.html"
          format="html" scope="external"/>.</li>
            <li>Click <b>OK</b> to close the dialog box and then either <b>OK</b> or <b>Apply</b> to
        save the preferences changes.</li>
        </ol>
        <p>After you perform the steps above, in the <b>dita-extension</b> folder you will have a
      fully functioning framework extension that can be shared with others.</p>
        <p>There are several methods for sharing the framework and you can read about them here:
        <xref
        href="https://www.oxygenxml.com/doc/ug-editor/topics/author-document-type-extension-sharing.html"
        format="html" scope="external"/>.</p>
        <p>After your team members install the framework, they can check the <i>Document Type
        Association</i> preferences page to make sure the framework is present in the list of
        <b>Document Types</b> and that it appears before the bundled <b>DITA</b> framework (meaning
      that it has higher priority).</p>
        <p>You can use the framework extension mechanism to customize numerous aspects of the
        <b>DITA</b> functionality in Oxygen. For example, you can remove various elements from the
      content completion list: <xref
          href="author-document-type-extension-sharing.dita"/>. Or you can
      distribute custom new file templates: <xref
          href="author-document-type-extension-sharing-custom-new-file-templates.dita"/>.</p>
    </body>
</topic>
